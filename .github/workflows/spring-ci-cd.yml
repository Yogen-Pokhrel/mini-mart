  name: Spring Boot CI/CD Pipeline

  on: [push, pull_request]

  jobs:
    build-and-test:
      environment: deploy
      runs-on: ubuntu-latest

      services:
        postgres:
          image: postgres:13
          env:
            POSTGRES_DB: minimart
            POSTGRES_USER: yogen
            POSTGRES_PASSWORD: dat@123
          ports:
            - 5432:5432
          options: >
            --health-cmd="pg_isready -U postgres"
            --health-interval=10s
            --health-timeout=5s
            --health-retries=5

      steps:
        - uses: actions/checkout@v2

        - name: Setup enviornment variables
          run: |
            touch src/main/resources/.env
            echo "DATABASE_HOST=${{ secrets.DATABASE_URL }}" >> src/main/resources/.env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> src/main/resources/.env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> src/main/resources/.env
        - name: Set up JDK 21
          uses: actions/setup-java@v2
          with:
            java-version: '21'
            distribution: 'adopt'

        - name: Cache Maven dependencies
          uses: actions/cache@v2
          with:
            path: |
              ~/.m2/repository
              !~/.m2/repository/org/example
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-m2-

        - name: Build and test with Maven
          run: |
            cd backend/Minimart-API-System
            mvn clean package
          env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

        - name: Verify Maven build artifacts in backend/Minimart-API-System
          run: |
            echo "Listing contents of target/"
            ls -l target/
            echo "Verifying JAR file presence"
            ls -l target/*.jar

        - name: Heroku Container Registry Login
          if: github.event_name == 'push'
          run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

        - name: Install tree
          run: sudo apt-get update && sudo apt-get install tree

        - name: Copy jar
          run: |
            cd backend/Minimart-API-System && cp target/*.jar .

        - name: List build artifacts
          if: github.event_name == 'push'
          run: tree backend/Minimart-API-System

        - name: Build Docker Image
          if: github.event_name == 'push'
          run: cd backend/Minimart-API-System && docker build -t my-app -f Dockerfile .

        - name: Tag Image
          if: github.event_name == 'push'
          run: docker tag my-app registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

        - name: Push to Heroku
          if: github.event_name == 'push'
          run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

        - name: Release Image on Heroku
          if: github.event_name == 'push'
          run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
          env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

